<?xml version="1.0" encoding="UTF-8"?>
<project name="solrmarc" default="build_core" basedir="." >

	<property file="build.properties" />
	<property file="${site.conf.props}" />

	<!-- CORE properties, in case they aren't already defined -->
	<property name="core.build.dir" value="${build.dir}" />
	<property name="dist.dir" value="dist" />
	<property name="dist.exe.dir" value="bin" />
	<property name="dist.exe.path" location="${dist.path}/${dist.exe.dir}" />
	<property name="core.jar.name" value="SolrMarc" />
	
	<!-- CORE TEST properties, in case they aren't already defined -->
	<property name="core.test.dir" value="${test.dir}/core" />
	<property name="core.test.config.file" value="${core.test.dir}/test_core_config.properties" />
	<property name="core.test.data.path" value="${core.test.dir}/data"/>
	<property name="core.test.solr.orig.dir" value="${test.dir}/solr" />
	<property name="test.jetty.dir" value="${test.dir}/jetty" />
	<property name="test.solr.run.dir" value="${test.jetty.dir}/solr" />
	<property name="test.solr.data.dir" value="${test.solr.run.dir}/data" />
	<property name="test.solr.url" value="http://localhost:8985/solr" />
	<property name="cobertura.jar.dir" location="${test.lib.dir}/cobertura-1.9.4.1" />
	<property name="cobertura.core.data.file" value="${core.instr.dir}/cobertura.ser" />

	<!-- SITE properties, in case they aren't already defined -->
	<property name="site.src.dir" location="${src.dir}/${site.basename}" />
	<property name="site.build.dir" location="${build.dir}/${site.basename}" />
	<property name="site.indexer.class" value="org.solrmarc.index.SolrIndexer" />
<!-- FIXME:  trans.map.path not defined -->	
	<property name="site.map.dir" location="${site.conf.dir}/${trans.map.path}" />
	<property name="site.scripts.dir" location="${site.conf.dir}/${scripts.dir}" />
	<property name="site.solrconf.dir" location="${site.conf.dir}/solrConf" />

	<!-- SITE TEST properties, in case they aren't already defined -->
	<property name="site.test.basedir" location="${test.dir}/${site.basename}" />
	<property name="site.test.src.dir" location="${site.test.basedir}/${src.dir}" />
	<property name="site.test.data.dir" location="${site.test.basedir}/data" />
	<property name="site.test.build.dir" location="${build.dir}/${test.dir}/${site.basename}" />
	<property name="site.test.solr.dir" location="${site.test.basedir}/solr" />
		
	
	<target name="init_core" description="create (empty) generated directories for core code">
		<mkdir dir="${core.build.dir}" />
	</target>

	<target name="init_site" depends="init_core" description="create (empty) generated directories for site AND core code">
		<mkdir dir="${site.build.dir}" />
	</target>
		
	<path id="core.classpath" description="classes and jars needed to build CORE code)">
		<fileset dir="${lib.dir}">
			<include name="*.jar" />
		</fileset>
		<fileset dir="${solrj.lib.dir}" >
			<include name="*.jar" />
		</fileset>
	</path>
	
	<target name="compile_core" depends="init_core" description="Compile CORE source code into the build directory">
		<javac destdir="${core.build.dir}" srcdir="${core.src.dir}" 
                target="${java.compat.version}" 
                source="${java.compat.version}" 
                debug="true" debuglevel="lines,vars,source" 
                encoding="utf-8" includeAntRuntime="false">
			<include name="**/*.java" />
			<classpath refid="core.classpath" />
		</javac>
	</target>

	<path id="site.classpath" description="classes and jars needed to build SITE code">
		<fileset dir="${site.lib.dir}">
			<include name="*.jar" />
		</fileset>
		<pathelement location="${core.build.dir}"/>
		<path refid="core.classpath" />
	</path>
	
	<target name="compile_site" depends="compile_core,init_site" description="Compile SITE AND CORE source code into the build directory">
		<javac destdir="${site.build.dir}" srcdir="${site.src.dir}" 
                target="${java.compat.version}" 
                source="${java.compat.version}" 
                debug="true" debuglevel="lines,vars,source" 
                encoding="utf-8" includeAntRuntime="false">
			<include name="**/*.java" />
			<classpath refid="site.classpath" />
		</javac>
	</target>
	
	<target name="build_core" depends="compile_core" description="Build custom jar file containing CORE code and log4j.properties" >
		<jar destfile="${core.build.dir}/${core.jar.name}.jar">
			<fileset dir="${core.build.dir}" includes="**/*.class" />
			<fileset file="${log4j.props}" />
		</jar>
	</target>

	<target name="build_site" depends="build_core,compile_site" description="Build custom jar file containing SITE code" >
		<jar destfile="${site.build.dir}/${site.jar.name}.jar">
			<fileset dir="${site.build.dir}" includes="**/*.class" />
			<fileset file="${core.build.dir}/${core.jar.name}.jar" />
		</jar>
	</target>

	
<!-- FIXME:  dist.path not defined -->	
	
	<target name="dist" depends="build_core" unless="dist.already.run"
             description="Copy necessary files to the dist directory, to make a runnable instance of SolrMarc">
		<mkdir dir="${dist.path}" />
		<copy todir="${dist.path}" >
			<fileset dir="${site.base.dir}" includes="${trans.map.dir}/**,${scripts.dir}/**" />
		</copy>
		<copy_solrmarc_set_default_config config="${default.config}" todir="${dist.path}" />
		<copy todir="${dist.path}" >
			<flattenmapper/>
			<fileset dir="${site.build.dir}" includes="*.jar" />
			<fileset dir="${site.base.dir}" includes="*_index.properties,marc*.properties" />
		</copy>
		<if >
			<available file="${site.build.dir}/${custom.jar.name}.jar" />
			<then>
				<property name="custom.jar.name.jar" value="${custom.jar.name}.jar" />
			</then>
			<else>
				<property name="custom.jar.name.jar" value="" />
			</else>
		</if>
		<copy_libs_set_property />
		<copy todir="${dist.path}" overwrite="true" >
			<fileset dir="${site.base.dir}" includes="*_config.properties,import.properties" />
			<filterchain>
				<expandproperties />
				<tokenfilter>
					<replaceregex pattern="(solrmarc[.]custom[.]jar[.]path=.*)" replace="\1${add.lib.to.custom.jar.line}" />
				</tokenfilter>
				<fixcrlf />
			</filterchain>
		</copy>

		<copy_scripts />
		<copy_jetty />
		<copy_solr />
		<property name="dist.already.run" value="true" />
	</target>
	
	
	<target name="clean_core" description="remove the build directories for CORE">
		<delete dir="${core.build.dir}" />
	</target>

	<target name="clean_site" description="remove the build directories for SITE">
		<delete dir="$site.build.dir}" />
	</target>
		
	<target name="clean" depends="clean_site,clean_core" description="remove the build directories for CORE and SITE" />
		

	
	

	<!-- Testing Targets -->

	<target name="test_init_core" description="create (empty) generated directories for CORE TEST code">
		<mkdir dir="${core.test.build.dir}" />
	</target>

	<target name="test_init_site" depends="test_init_core" description="create (empty) generated directories for site AND core TEST code">
		<mkdir dir="${site.test.build.dir}" />
	</target>

	<path id="test.core.build.classpath" description="classes and jars needed to build CORE TEST code">
		<fileset dir="${test.lib.dir}">
			<include name="**/*.jar" />
		</fileset>
		<pathelement location="${core.build.dir}"/>
		<path refid="core.classpath" />
	</path>
	
	<target name="test_compile_core" depends="compile_core,test_init_core" description="Compile CORE TEST source code into the test build directory">
		<javac destdir="${core.test.build.dir}" srcdir="${core.test.src.dir}" 
                target="${java.compat.version}" 
                source="${java.compat.version}" 
                debug="true" debuglevel="lines,vars,source" 
                encoding="utf-8" includeAntRuntime="false">
			<include name="**/*.java" />
			<classpath refid="test.core.build.classpath" />
		</javac>
	</target>

	<path id="test.site.build.classpath" description="classes and jars needed to build SITE TEST code">
		<fileset dir="${site.test.lib.dir}">
			<include name="**/*.jar" />
		</fileset>
		<pathelement location="${core.test.build.dir}"/>
		<path refid="test.core.build.classpath" />
	</path>
	
	<target name="test_compile_site" depends="test_compile_core,test_init_site" description="Compile SITE AND CORE TEST source code into the test build directory">
		<javac destdir="${site.test.build.dir}" srcdir="${site.test.src.dir}" 
                target="${java.compat.version}" 
                source="${java.compat.version}" 
                debug="true" debuglevel="lines,vars,source" 
                encoding="utf-8" includeAntRuntime="false">
			<include name="**/*.java" />
			<classpath refid="test.site.build.classpath" />
		</javac>
	</target>
	
	<path id="test.core.run.classpath" description="classes and jars needed to run CORE TEST code">
		<pathelement location="${core.test.build.dir}"/>
		<fileset dir="${test.solr.run.dir}/lib">
			<include name="*.jar" />
		</fileset>
		<path refid="test.core.build.classpath" />
	</path>
	
	<target name="core_setup_test_jetty">
		<echo message="solr path for CORE testing: ${test.solr.run.dir}" />
		<!-- set up jetty with solr files, including war, configuration, jars ... -->
		<mkdir dir="${test.jetty.dir}/logs" />
		<mkdir dir="${test.solr.run.dir}" />
		<copy todir="${test.solr.run.dir}">
			<fileset dir="${core.test.solr.orig.dir}" includes="**/conf/**,**/lib/**"/>
		</copy>
		<!-- copy over the war file -->
		<copy file="${core.solr.war.path}" tofile="${test.jetty.dir}/webapps/solr.war" failonerror="false" />
	</target>

	<target name="test_core" depends="test_clean,test_compile_core,core_setup_test_jetty" description="run tests for CORE code">
		<!-- if no core test class is defined, call the Util Unit test -->
		<property name="core.test.class"  value="org.solrmarc.tools.UtilUnitTests" />

    <junit showoutput="yes" printsummary="yes" fork="yes" forkmode="perBatch">
			<classpath refid="test.core.run.classpath" />
			<formatter type="plain" usefile="false" />

			<sysproperty key="test.config.file" value="${core.test.config.file}" />
    	<sysproperty key="test.data.path" value="${core.test.data.path}" />
			<sysproperty key="test.jetty.port" value="${test.jetty.port}" />
			<sysproperty key="test.jetty.dir" value="${test.jetty.dir}" />
    	<sysproperty key="test.solr.url" value="${test.solr.url}" />
			<sysproperty key="test.solr.path" value="${test.solr.run.dir}" />
			<sysproperty key="solr.data.dir" value="${test.solr.data.dir}" />
			<sysproperty key="solr.path" value="${test.solr.path}" />
    	<sysproperty key="solrmarc.use_binary_request_handler" value="${core.test.use_binary_request_handler}" />
    	<sysproperty key="solrmarc.use_streaming_proxy" value="${core.test.use_streaming_proxy}" />
			<sysproperty key="test.solr.log.level" value="${test.solr.log.level}" />
			<sysproperty key="test.solrmarc.log.level" value="${test.solrmarc.log.level}" />
    	
			<test name="${core.test.class}" />
<!--
			<test name="${core.test.class}" />
    	<batchtest>
				<fileset dir="${core.test.build.dir}" includes="**/tools/*Test*.class" />
			</batchtest>
-->
		</junit>
	</target>
	
	<path id="cobertura.classpath">
		<fileset dir="${cobertura.jar.dir}">
			<include name="cobertura.jar" />
			<include name="lib/**/*.jar" />
		</fileset>
	</path>

	<!-- Load cobertura custom ant tasks -->
	<taskdef classpathref="cobertura.classpath" resource="tasks.properties" />

	<!-- NOTE:  this should be used after a fresh core compile -->
	<target name="instrument_core">
		<delete dir="${core.instr.dir}" />
		<delete file="${cobertura.core.data.file}" />
		<mkdir dir="${core.instr.dir}" />
		<cobertura-instrument todir="${core.instr.dir}" datafile="${cobertura.core.data.file}">
			<fileset dir="${core.build.dir}">
				<include name="**/*.class" />
				<exclude name="**/*Test*" />
			</fileset>
		</cobertura-instrument>
	</target>
	
	<target name="test_core_coverage" depends="test_clean,test_compile_core,instrument_core,core_setup_test_jetty"
		description="run tests for CORE and capture code coverage" >
		<delete dir="${core.coverage.dir}" />
		<mkdir dir="${core.coverage.dir}"/>

		<path id="instrumented.classpath">
			<pathelement location="${core.instr.dir}" />
			<path refid="test.core.run.classpath" />
			<path refid="cobertura.classpath" />
		</path>
		<echo message="test class = ${test.class} " />

		<junit showoutput="yes" printsummary="yes" fork="yes">
			<formatter type="xml" />

			<classpath refid="instrumented.classpath" />

			<!-- name of the coverage data file to use.  It must be the same
                as the coverage data file generated during instrumentation. -->
			<sysproperty key="net.sourceforge.cobertura.datafile" file="${cobertura.core.data.file}" />

			<sysproperty key="test.config.file" value="${core.test.config.file}" />
    	<sysproperty key="test.data.path" value="${core.test.data.path}" />
			<sysproperty key="test.jetty.port" value="${test.jetty.port}" />
			<sysproperty key="test.jetty.dir" value="${test.jetty.dir}" />
    	<sysproperty key="test.solr.url" value="${test.solr.url}" />
			<sysproperty key="test.solr.path" value="${test.solr.run.dir}" />
			<sysproperty key="solr.data.dir" value="${test.solr.data.dir}" />
			<sysproperty key="solr.path" value="${test.solr.path}" />
    	<sysproperty key="solrmarc.use_binary_request_handler" value="${core.test.use_binary_request_handler}" />
    	<sysproperty key="solrmarc.use_streaming_proxy" value="${core.test.use_streaming_proxy}" />
			<sysproperty key="test.solr.log.level" value="${test.solr.log.level}" />
			<sysproperty key="test.solrmarc.log.level" value="${test.solrmarc.log.level}" />
    	
			<test name="${core.coverage.test.class}" />
		</junit>

		<cobertura-report format="html" destdir="${core.coverage.dir}" srcdir="${site.src.dir}" datafile="${cobertura.core.data.file}"/>
	</target>

	
	
	<target name="junittest" depends="dist,testJar" description="run junit tests for bib index">
		<echo message="solr.path: ${solr.path}" />
		<echo message="solr.path being used for testing: ${site.test.solr.dir}" />
		<property name="solr.jar.file.dir" value="${site.test.dir}/tmp_solr_war_jars" />
		<get_jars_from_solr_war src="${jetty.install.dir}/webapps/solr.war" todir="${solr.jar.file.dir}" />
		<get_jars_from_solrmarc_onejar junit="test/*.jar"  todir="${site.test.dir}/tmp_solrmarc_jars" />

		<path id="test.run.classpath.jars">
			<fileset file="${site.build.dir}/${custom.jar.name}.jar" />
			<fileset dir="${site.test.dir}/tmp_solrmarc_jars" includes="*.jar" />
			<fileset file="${site.test.build.dir}/${site.test.jar}" />
			<fileset dir="${solr.jar.file.dir}" includes="*.jar" />
		</path>

		<!-- if no junit test class is defined, call the Util Unit test, which merely test some of the 
             utility classes used by SolrMarc. -->
		<property name="test.class"  value="org.solrmarc.index.UtilUnitTests" />

		<echo message="test class = ${test.class} " />
		<echo message="solr.data.dir = ${site.test.solr.dir}/data " />

		<if >
			<and>
				<isset property="test.class" />
				<available classname="${test.class}" classpathref="test.run.classpath.jars" />
			</and>
			<then>
				<junit showoutput="yes" printsummary="yes" fork="yes" forkmode="once" dir="${dist.path}">
					<formatter type="xml" usefile="yes" />

					<classpath>
						<path refid="test.run.classpath.jars" />
					</classpath>

					<sysproperty key="test.data.path" path="${test.data.dir}" />
					<sysproperty key="test.data.file" value="${test.data.file}" />
					<sysproperty key="test.config.dir" path="${dist.path}" />
					<sysproperty key="test.config.file" value="${default.config}" />
					<sysproperty key="solr.path" path="${site.test.solr.dir}" />
					<sysproperty key="solr.data.dir" path="${site.test.solr.dir}/data" />
					<sysproperty key="test.solr.verbose" value="${test.solr.verbose}" />
					<test name="${test.class}" />
				</junit>
			</then>
			<else>
				<echo message="test class ${test.class} not defined or not available" />
			</else>
		</if>
		<!--  Now delete the jar files that had to be un-jarred from the solr.war file for the test to run -->
		<delete dir="${solr.jar.file.dir}" deleteonexit="true" quiet="true" />
		<delete dir="${site.test.dir}/tmp_solrmarc_jars" deleteonexit="true" quiet="true" />
	</target>

	
	
	<target name="test_clean_core" description="remove the directories generated for CORE testing">
		<delete dir="${core.test.build.dir}" />
		<delete dir="${test.solr.data.dir}" />
		<delete dir="${test.solr.run.dir}" />
		<delete file="${test.jetty.dir}/webapps/solr.war"/>
		<delete dir="${core.instr.dir}" />
		<delete file="${cobertura.core.data.file}" />
		<delete dir="${core.coverage.dir}" />
	</target>

	<target name="test_clean_site" description="remove the directories generated for SITE testing">
		<delete dir="$site.test.build.dir}" />
		<delete dir="${site.test.solr.dir}/data" quiet="true" />
	</target>
	
	<target name="test_clean" depends="test_clean_site,test_clean_core" description="remove the directories generated for CORE and SITE testing" />
	
	

	

	<target name="testJar" depends="build_core,test_compile_core" if="test.has.source" description="jar up test class files">
		<echo message=" creating test jar :  ${site.test.build.dir}/${site.test.jar}" />
		<jar destfile="${site.test.build.dir}/${site.test.jar}" >
			<fileset dir="${site.test.build.dir}" includes="**/*.class" />
		</jar>
	</target>

	<target name="test" depends="maintest,smoketest,indextest,junittest" description="run the four types of tests" >

		
		<!-- copy files from solrConf if they are newer. -->
		<copy overwrite="true" todir="${site.test.solr.dir}/conf" failonerror="false">
			<fileset dir="${site.solrconf.dir}" includes="*" excludes="*.jar,*.war" >
				<depend targetdir="${site.test.solr.dir}/conf" />
			</fileset>
		</copy>
		<copy overwrite="true" todir="${site.test.solr.dir}/lib" failonerror="false">
			<fileset dir="${site.solrconf.dir}" includes="*.jar" >
				<depend targetdir="${site.test.solr.dir}/lib" />
			</fileset>
		</copy>
		<!-- copy war file from solrConf if it is newer. -->
		<copy overwrite="true" todir="${site.test.dir}/jetty/webapps" failonerror="false">
			<fileset dir="${site.base.dir}/solrConf" includes="*.war" >
				<depend targetdir="${site.test.dir}/jetty/webapps" />
			</fileset>
		</copy>
	</target>

	<target name="smoketest" depends="dist,test_init_core" description="start jetty pointing at test solr, index file, then look for it.">
		<if>
			<equals arg1="${solr.is.multicore}" arg2="false" />
			<then>
				<property name="smoketest.solr.data.dir" value="${site.test.solr.dir}/data" />
			</then>
			<else>
				<property name="smoketest.solr.data.dir" value="" />
			</else>
		</if>
		<property name="jetty.test.port" value="8983" />

		<!-- start a jetty server at the port defined by property  jetty.test.port  -->
		<echo level="warning" message="Starting Jetty for testing at URL:  http://localhost:${jetty.test.port} ..." />
		<jetty-start jettyloc="${jetty.install.dir}" solrhome="${site.test.solr.dir}" solrdata="${smoketest.solr.data.dir}" port="${jetty.test.port}" solrcore="${solr.core.name}" />

		<!-- check whether index in jetty server contains more than a certain number of records -->
		<!-- this is done because the next step deletes ALL of the records there, and we don't want -->
		<!-- delete your production index by mistake. -->
		<property name="maximum.expected.recs.in.test.solr" value="20" />
		<check-record-present port="${jetty.test.port}" solrcore="${solr.core.name}" numfoundprop="smoketest.init_coreial.num.found" expectmaxcount="${maximum.expected.recs.in.test.solr}" />

		<!-- Now delete all of the records in the test solr index -->
		<echo level="warning" message="Deleting all records from test jetty via URL:  http://localhost:${jetty.test.port}/solr/update " />
		<jetty-delete-all returnproperty="test.smoke.delete.all" port="${jetty.test.port}" solrcore="${solr.core.name}" />
		<echo message="${test.smoke.delete.all}" />

		<!-- Index a sample file containing a single record -->
		<property name="smoketest.index.run.1.marcfile" location="${site.test.dir}/data/u399.mrc" />
		<echo level="warning" message="Indexing file: ${smoketest.index.run.1.marcfile}" />
		<indexfile solrhome="${site.test.solr.dir}" solrdata="${smoketest.solr.data.dir}" marcfile="${smoketest.index.run.1.marcfile}" port="${jetty.test.port}" solrcore="${solr.core.name}" returnproperty="smoketest.index.run.1" />
		<echo level="warning" message="${smoketest.index.run.1}" />

		<!-- Index a sample file containing about a dozen records -->
		<property name="smoketest.index.run.2.marcfile" location="${site.test.dir}/data/selectedRecs.mrc" />
		<echo level="warning" message="Indexing file: ${smoketest.index.run.2.marcfile}" />
		<indexfile solrhome="${site.test.solr.dir}" solrdata="${smoketest.solr.data.dir}" marcfile="${smoketest.index.run.2.marcfile}" port="${jetty.test.port}" solrcore="${solr.core.name}" returnproperty="smoketest.index.run.2" />
		<echo level="warning" message="${smoketest.index.run.2}" />

		<!-- Check number of records in index after the to sample index files are added -->
		<check-record-present port="${jetty.test.port}" solrcore="${solr.core.name}" recordlistprop="smoketest.record.list" numfoundprop="smoketest.num.found" />
		<echo level="warning" message="num found: ${smoketest.num.found} :  ${smoketest.record.list}" />
		<jetty-stop port="${jetty.test.port}" />

		<!-- Fail and exit if the wrong number of documents was found-->
		<property name="smoketest.expected.num" value="12" />
		<fail message="Expected to find ${smoketest.expected.num} documents in index instead found ${smoketest.num.found}" >
			<condition>
				<not>
					<equals arg1="${smoketest.num.found}" arg2="${smoketest.expected.num}" />
				</not>
			</condition>
		</fail>
		<echo level="warning" message="Smoketest Successful!" />
	</target>

	<target name="indextest" depends="dist,testJar" description="run index acceptance test">
		<echo message="solr.path: ${solr.path}" />
		<echo message="solr.path being used for testing: ${site.test.solr.dir}" />
		<property name="solr.jar.file.dir" value="${site.test.dir}/tmp_solr_war_jars" />
		<get_jars_from_solr_war src="${jetty.install.dir}/webapps/solr.war" todir="${solr.jar.file.dir}" />
		<get_jars_from_solrmarc_onejar junit="test/*.jar"  todir="${site.test.dir}/tmp_solrmarc_jars" />

		<if >
			<isset property="top_level_test_only" />
			<then>
				<path id="test.run.classpath.jars">
					<fileset dir="${site.test.dir}/tmp_solrmarc_jars" includes="*.jar" />
					<fileset dir="${solr.jar.file.dir}" includes="*.jar" />
				</path>
				<property name="indextest.data.file" value="maintest.txt" />
			</then>
			<else>
				<path id="test.run.classpath.jars">
					<fileset file="${site.build.dir}/${custom.jar.name}.jar" />
					<fileset dir="${site.test.dir}/tmp_solrmarc_jars" includes="*.jar" />
					<fileset file="${site.test.build.dir}/${site.test.jar}" />
					<fileset dir="${solr.jar.file.dir}" includes="*.jar" />
				</path>
				<property name="indextest.data.file" value="indextest.txt" />
			</else>
		</if >

		<property name="indextest.class" value="org.solrmarc.index.ParameterizedIndexTest" />
		<echo message="indextest class = ${indextest.class} " />
		<echo message="solr.data.dir = ${site.test.solr.dir}/data " />

		<if >
			<and>
				<isset property="indextest.class" />
				<available classname="${indextest.class}" classpathref="test.run.classpath.jars" />
			</and>
			<then>
				<if>
					<available filepath="${test.data.dir}" file="${indextest.data.file}" type="file" />
					<then>
						<junit showoutput="yes" printsummary="yes" dir="${dist.path}" fork="yes" forkmode="once" >
							<formatter type="xml" usefile="yes" />

							<classpath>
								<path refid="test.run.classpath.jars" />
							</classpath>

							<sysproperty key="test.data.path" path="${test.data.dir}" />
							<sysproperty key="test.data.file" value="${indextest.data.file}" />
							<sysproperty key="solr.path" path="${site.test.solr.dir}" />
							<sysproperty key="solr.data.dir" path="${site.test.solr.dir}/data" />
							<sysproperty key="test.solr.verbose" value="${test.solr.verbose}" />
							<test name="${indextest.class}" />
						</junit>
					</then>
					<else>
						<echo message="test data file ${indextest.data.file} not available" />
					</else>
				</if>
			</then>
			<else>
				<echo message="test class ${indextest.class} not defined or not available" />
			</else>
		</if>
		<!--  Now delete the jar files that had to be un-jarred from the solr.war file for the test to run -->
		<delete dir="${solr.jar.file.dir}" deleteonexit="true" quiet="true" />
		<delete dir="${site.test.dir}/tmp_solrmarc_jars" deleteonexit="true" quiet="true" />
	</target>

	<target name="maintest" depends="dist,testJar" description="run indexscript tests for main program">
		<antcall target="indextest" >
			<param name="top_level_test_only" value="true" />
		</antcall>
	</target>


	<!-- **********  Cobertura Code Coverage *********** -->
<!--	
	<path id="cobertura.classpath">
		<fileset dir="${cobertura.jar.dir}">
			<include name="cobertura.jar" />
			<include name="lib/**/*.jar" />
		</fileset>
	</path>
-->

	<!-- Load cobertura custom ant tasks -->
<!--	
	<taskdef classpathref="cobertura.classpath" resource="tasks.properties" />

	<property name="cobertura.instr.dir" value="instr"/>
-->

	<!-- instrument custom classes only -->
	<target name="instrument-custom" depends="clean,dist" description="instrument custom (local) classes only for coverage reports">
		<delete dir="${cobertura.instr.dir}" />
		<mkdir dir="${cobertura.instr.dir}" />
		<cobertura-instrument todir="${cobertura.instr.dir}">
			<fileset dir="${site.build.dir}">
				<include name="**/*.class" />
				<exclude name="**/*Test*" />
			</fileset>
		</cobertura-instrument>
	</target>

	<!-- instrument both custom and solrmarc core classes -->
	<target name="instrument-all" depends="instrument-custom" description="instrument both custom (local) and solrmarc core classes for coverage reports">
		<!-- get freshly compiled solrmarc core classes -->
		<ant dir="../${lib.dir}/solrmarc" target="compile_core" inheritAll="false" />
		<cobertura-instrument todir="${cobertura.instr.dir}">
			<fileset dir="../${lib.dir}/solrmarc/${build.dir}">
				<include name="**/*.class" />
				<exclude name="**/*Test*" />
			</fileset>
		</cobertura-instrument>
	</target>

<!--	
	<property name="cobertura.coverage.dir" value="${build.dir}/coverage/cobertura" />
-->

	<!-- private target to run junit test with Cobertura code coverage. Coverage stats depend on contents of instrumented class directory -->
	<target name="run-instrumented-test">
		<echo message="solr.path: ${solr.path}" />
		<echo message="solr.path being used for testing: ${site.test.solr.dir}" />
		<property name="solr.jar.file.dir" value="${site.test.dir}/tmp_solr_war_jars" />

		<get_jars_from_solr_war src="${jetty.install.dir}/webapps/solr.war" todir="${solr.jar.file.dir}" />
		<get_jars_from_solrmarc_onejar junit="test/*.jar"  todir="${site.test.dir}/tmp_solrmarc_jars" />

		<mkdir dir="${cobertura.coverage.dir}"/>

		<path id="instrumented.classpath">
			<pathelement location="${cobertura.instr.dir}" />
			<fileset file="${site.test.build.dir}/${site.test.jar}" />
			<pathelement location="${dist.path}" />
			<!-- has _config.properties file -->
			<fileset dir="${site.test.dir}/tmp_solrmarc_jars" includes="*.jar" />
			<!-- has junit jar -->
			<fileset dir="${solr.jar.file.dir}" includes="*.jar" />
			<path refid="cobertura.classpath" />
		</path>

		<echo message="test class = ${test.class} " />

		<junit showoutput="yes" printsummary="yes" fork="yes">
			<formatter type="xml" />

			<classpath refid="instrumented.classpath" />

			<!-- name of the coverage data file to use.  It must be the same
                as the coverage data file generated during instrumentation. -->
			<sysproperty key="net.sourceforge.cobertura.datafile"
                file="cobertura.ser" />

			<sysproperty key="test.data.path" path="${test.data.dir}" />
			<sysproperty key="test.data.file" value="${test.data.file}" />
			<sysproperty key="test.config.dir" path="${dist.path}" />
			<sysproperty key="test.config.file" value="${default.config}" />
			<sysproperty key="solr.path" path="${site.test.solr.dir}" />
			<sysproperty key="solr.data.dir" path="${site.test.solr.dir}/data" />
			<sysproperty key="test.solr.verbose" value="${test.solr.verbose}" />
			<test name="${test.class}" />
		</junit>

		<cobertura-report format="xml" destdir="${cobertura.coverage.dir}" srcdir="${site.src.dir}" />
		<cobertura-report format="html" destdir="${cobertura.coverage.dir}" srcdir="${site.src.dir}" />

		<!--  Now delete the jar files that had to be un-jarred from the solr.war file for the test to run -->
		<delete dir="${solr.jar.file.dir}" deleteonexit="true" quiet="true" />
		<delete dir="${site.test.dir}/tmp_solrmarc_jars" deleteonexit="true" quiet="true" />
	</target>

	<target name="test-custom-coverage" depends="instrument-custom,testJar,run-instrumented-test" description="run junittest with code coverage for custom code only" />

	<target name="test-all-coverage" depends="instrument-all,testJar,run-instrumented-test" description="run junittest with code coverage for custom and core solrmarc code" />



	<!-- macros to handle the bulk of the work for the targets defined above   -->


	<!-- macro to copy SolrMarc.jar from lib directory to dist directory and set the default config to use at the same time -->
	<macrodef name="copy_solrmarc_set_default_config" >
		<attribute name="config" />
		<attribute name="todir" />
		<sequential>
			<java jar="${site.lib.dir}/${solrmarc.core.one-jar.name}" fork="true" >
				<jvmarg value="-Dsolrmarc.main.class=org.solrmarc.tools.PropertyFileFetcher" />
				<arg value="JarUtils.jar" />
				<arg value="${site.build.dir}" />
			</java>
			<java classpath="${site.build.dir}/JarUtils.jar" classname="JarUpdate" fork="true" >
				<arg value="${site.lib.dir}/${solrmarc.core.one-jar.name}" />
				<arg value="META-INF/MANIFEST.MF" />
				<arg value="Default-Config-File: @{config}" />
				<arg value="@{todir}/${solrmarc.core.one-jar.name}" />
			</java>
			<delete file="${site.build.dir}/JarUtils.jar" />
		</sequential>
	</macrodef>

	<macrodef name="copy_scripts" description="Copy scripts or batch files from script_templates directory to the dist directory">
		<sequential>
			<if>
				<or>
					<os family="windows" />
					<equals arg1="${package-prebuilt.allscripts.batch}" arg2="true"/>
				</or>
				<then>
					<mkdir dir="${dist.exe.path}" />
					<copy todir="${dist.exe.path}" overwrite="true">
						<fileset dir="${site.script.template.dir}" includes="*.bat" />
						<filterchain>
							<fixcrlf eol="dos"/>
						</filterchain>
						<filterset>
							<filter token="DEFAULT_CONFIG_FILE" value="${default.config}" />
							<filter token="MEM_ARGS" value="${exe.mem.args}" />
						</filterset>
					</copy>
				</then>
			</if>
			<if>
				<or>
					<not>
						<os family="windows" />
					</not>
					<equals arg1="${package-prebuilt.allscripts.shell}" arg2="true"/>
				</or>
				<then>
					<mkdir dir="${dist.exe.path}" />
					<copy todir="${dist.exe.path}" overwrite="true">
						<fileset dir="${site.script.template.dir}" includes="*" excludes="*.bat" />
						<filterchain>
							<fixcrlf eol="unix"/>
						</filterchain>
						<filterset>
							<filter token="DEFAULT_CONFIG_FILE" value="${default.config}" />
							<filter token="MEM_ARGS" value="${exe.mem.args}" />
						</filterset>
					</copy>

					<chmod perm="u+x">
						<fileset dir="${dist.exe.path}" excludes="*.jar,*.bat,*.properties,*.log" />
					</chmod>
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="copy_libs_set_property" description="Copy jar files in the local_build/lib directory to the dist/lib directory, and modify solrmarc.custom.jar.path in config file" >
		<sequential>
			<if >
				<resourcecount when="gt" count="0">
					<fileset id="local_lib_jars" dir="${site.lib.dir}" includes="*.jar" excludes="SolrMarc.jar" />
				</resourcecount>
				<then>
					<mkdir dir="${dist.path}/lib" />
					<copy todir="${dist.path}/lib" >
						<fileset refid="local_lib_jars" />
					</copy>
					<if >
						<length string="${custom.jar.name.jar}" when="gt" length="0" />
						<then>
							<property name="add.lib.to.custom.jar.line" value="|lib" />
						</then>
						<else>
							<property name="add.lib.to.custom.jar.line" value="lib" />
						</else>
					</if >
				</then>
				<else>
					<property name="add.lib.to.custom.jar.line" value="" />
				</else>
			</if>
		</sequential>
	</macrodef>


	<!-- macro to unbundle all of the necessary jars from the SolrMarc One-Jar so they can be used by junit tests -->
	<macrodef name="get_jars_from_solrmarc_onejar" >
		<attribute name="junit" default="lib/*.jar" />
		<attribute name="todir" />
		<sequential>
			<mkdir dir="@{todir}" />
			<unwar src="${site.lib.dir}/SolrMarc.jar" dest="@{todir}" >
				<patternset>
					<include name="main/*.jar"/>
					<include name="lib/*.jar"/>
					<include name="@{junit}"/>
				</patternset>
				<flattenmapper />
			</unwar>
		</sequential>
	</macrodef>	
	
	<target name="clean_all" depends="test_clean, clean" description="remove all build, test and dist generated directories">
		<delete dir="${dist.dir}" quiet="true" />
	</target>

	
</project>
