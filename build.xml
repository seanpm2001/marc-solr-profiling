<?xml version="1.0" encoding="UTF-8"?>
<project name="solrmarc" default="build_core" basedir="." >

	<property file="build.properties" />

	<!-- CORE properties, in case they aren't already defined -->
	<property name="core.jar.name" value="SolrMarc" />
	
	<!-- Continuous Integration properties -->
	<property name="cobertura.jar.dir" location="${test.lib.dir}/cobertura-1.9.4.1" />
	<property name="cobertura.core.data.file" value="${core.instr.dir}/cobertura.ser" />
	<property name="cobertura.site.data.file" value="${site.instr.dir}/cobertura.ser" />


<!-- ******* CORE basic build targets ********** -->
	
	<target name="clean_core" description="remove the build directories for CORE">
		<delete dir="${core.build.dir}" />
	</target>

	<target name="init_core" description="create (empty) generated directories for core code">
		<mkdir dir="${core.build.dir}" />
	</target>

	<path id="core.classpath" description="classes and jars needed to build CORE code)">
		<fileset dir="${lib.dir}">
			<include name="*.jar" />
		</fileset>
		<fileset dir="${solrj.lib.dir}" >
			<include name="*.jar" />
		</fileset>
	</path>
	
	<target name="compile_core" depends="init_core" description="Compile CORE source code into the build directory">
		<javac destdir="${core.build.dir}" srcdir="${core.src.dir}" 
                target="${java.compat.version}" 
                source="${java.compat.version}" 
                debug="true" debuglevel="lines,vars,source" 
                encoding="utf-8" includeAntRuntime="false">
			<include name="**/*.java" />
			<classpath refid="core.classpath" />
		</javac>
	</target>

	<target name="build_core" depends="compile_core" description="Build custom jar file containing CORE code and log4j.properties" >
		<jar destfile="${core.build.dir}/${core.jar.name}.jar">
			<fileset dir="${core.build.dir}" includes="**/*.class" />
			<fileset file="${log4j.props}" />
		</jar>
	</target>

	
<!-- ******* SITE basic build targets ********** -->
	
	<target name="clean_site" description="remove the build directories for SITE">
		<delete dir="${site.build.dir}" />
	</target>
		
	<target name="init_site" depends="init_core" description="create (empty) generated directories for site AND core code">
		<mkdir dir="${site.build.dir}" />
	</target>

	<path id="site.classpath" description="classes and jars needed to build SITE code">
		<fileset dir="${site.lib.dir}">
			<include name="*.jar" />
		</fileset>
		<pathelement location="${core.build.dir}"/>
		<path refid="core.classpath" />
	</path>
	
	<target name="compile_site" depends="compile_core,init_site" description="Compile SITE AND CORE source code into the build directory">
		<javac destdir="${site.build.dir}" srcdir="${site.src.dir}" 
                target="${java.compat.version}" 
                source="${java.compat.version}" 
                debug="true" debuglevel="lines,vars,source" 
                encoding="utf-8" includeAntRuntime="false">
			<include name="**/*.java" />
			<classpath refid="site.classpath" />
		</javac>
	</target>
	
	<target name="build_site" depends="build_core,compile_site" description="Build custom jar file containing SITE code" >
		<jar destfile="${site.build.dir}/${site.jar.name}.jar">
			<fileset dir="${site.build.dir}" includes="**/*.class" />
			<fileset file="${log4j.props}" />
			<fileset file="${core.build.dir}/${core.jar.name}.jar" />
		</jar>
	</target>

	
<!-- ******* CORE and SITE together targets ********** -->
	
<!-- FIXME:  dist.path not defined -->	
	
	<target name="dist" depends="build_core" unless="dist.already.run"
             description="Copy necessary files to the dist directory, to make a runnable instance of SolrMarc">
		<mkdir dir="${dist.path}" />
		<copy todir="${dist.path}" >
			<fileset dir="${site.base.dir}" includes="${trans.map.dir}/**,${scripts.dir}/**" />
		</copy>
		<copy_solrmarc_set_default_config config="${default.config}" todir="${dist.path}" />
		<copy todir="${dist.path}" >
			<flattenmapper/>
			<fileset dir="${site.build.dir}" includes="*.jar" />
			<fileset dir="${site.base.dir}" includes="*_index.properties,marc*.properties" />
		</copy>
		<if >
			<available file="${site.build.dir}/${custom.jar.name}.jar" />
			<then>
				<property name="custom.jar.name.jar" value="${custom.jar.name}.jar" />
			</then>
			<else>
				<property name="custom.jar.name.jar" value="" />
			</else>
		</if>
		<copy_libs_set_property />
		<copy todir="${dist.path}" overwrite="true" >
			<fileset dir="${site.base.dir}" includes="*_config.properties,import.properties" />
			<filterchain>
				<expandproperties />
				<tokenfilter>
					<replaceregex pattern="(solrmarc[.]custom[.]jar[.]path=.*)" replace="\1${add.lib.to.custom.jar.line}" />
				</tokenfilter>
				<fixcrlf />
			</filterchain>
		</copy>

		<copy_scripts />
		<copy_jetty />
		<copy_solr />
		<property name="dist.already.run" value="true" />
	</target>
	
	<target name="clean" depends="clean_site,clean_core" description="remove the build directories for CORE and SITE" />
	

	
<!-- ******* CORE TEST targets ********** -->
	
	<target name="test_clean_core" description="remove the directories generated for CORE testing">
		<delete dir="${core.test.build.dir}" />
		<delete dir="${test.solr.data.dir}" />
		<delete dir="${test.solr.run.dir}" />
		<delete file="${test.jetty.dir}/webapps/solr.war"/>
		<delete dir="${core.instr.dir}" />
		<delete file="${cobertura.core.data.file}" />
		<delete dir="${core.coverage.dir}" />
	</target>

	<target name="test_init_core" description="create (empty) generated directories for CORE TEST code">
		<mkdir dir="${core.test.build.dir}" />
	</target>

	<path id="test.core.build.classpath" description="classes and jars needed to build CORE TEST code">
		<fileset dir="${test.lib.dir}">
			<include name="**/*.jar" />
		</fileset>
		<pathelement location="${core.build.dir}"/>
		<path refid="core.classpath" />
	</path>
	
	<target name="test_compile_core" depends="compile_core,test_init_core" description="Compile CORE TEST source code into the test build directory">
		<javac destdir="${core.test.build.dir}" srcdir="${core.test.src.dir}" 
                target="${java.compat.version}" 
                source="${java.compat.version}" 
                debug="true" debuglevel="lines,vars,source" 
                encoding="utf-8" includeAntRuntime="false">
			<include name="**/*.java" />
			<classpath refid="test.core.build.classpath" />
		</javac>
	</target>

	<path id="test.core.run.classpath" description="classes and jars needed to run CORE TEST code">
		<pathelement location="${core.test.build.dir}"/>
		<fileset dir="${test.solr.run.dir}/lib">
			<include name="*.jar" />
		</fileset>
		<path refid="test.core.build.classpath" />
	</path>
	
	<target name="core_setup_test_jetty">
		<echo message="solr path for CORE testing: ${test.solr.run.dir}" />
		<!-- set up jetty with solr files, including war, configuration, jars ... -->
		<mkdir dir="${test.jetty.dir}/logs" />
		<mkdir dir="${test.solr.run.dir}" />
		<copy todir="${test.solr.run.dir}">
			<fileset dir="${core.test.solr.orig.dir}" includes="**/conf/**,**/lib/**"/>
		</copy>
		<!-- copy over the war file -->
		<copy file="${core.solr.war.path}" tofile="${test.jetty.dir}/webapps/solr.war" failonerror="false" />
	</target>

	<target name="test_core" depends="test_clean,test_compile_core,core_setup_test_jetty" description="run tests for CORE code">
		<!-- if no core test class is defined, call the Util Unit test -->
		<property name="core.test.class"  value="org.solrmarc.tools.UtilUnitTests" />

    <junit showoutput="yes" printsummary="yes" fork="yes" forkmode="perBatch" haltonfailure="on">
			<classpath refid="test.core.run.classpath" />
			<formatter type="plain" usefile="false" />

			<sysproperty key="test.config.file" value="${core.test.config.file}" />
    	<sysproperty key="test.data.path" value="${core.test.data.path}" />
    	<sysproperty key="solrmarc.use_binary_request_handler" value="${core.test.use_binary_request_handler}" />
    	<sysproperty key="solrmarc.use_streaming_proxy" value="${core.test.use_streaming_proxy}" />
			<sysproperty key="test.solr.log.level" value="${test.solr.log.level}" />
			<sysproperty key="test.solrmarc.log.level" value="${test.solrmarc.log.level}" />
			<sysproperty key="test.jetty.port" value="${test.jetty.port}" />
			<sysproperty key="test.jetty.dir" value="${test.jetty.dir}" />
    	<sysproperty key="test.solr.url" value="${test.solr.url}" />
			<sysproperty key="test.solr.path" value="${test.solr.run.dir}" />
			<sysproperty key="solr.data.dir" value="${test.solr.data.dir}" />
			<sysproperty key="solr.path" value="${test.solr.run.dir}" />
    	
			<test name="${core.test.class}" />
<!--
			<test name="${core.test.class}" />
    	<batchtest>
				<fileset dir="${core.test.build.dir}" includes="**/tools/*Test*.class" />
			</batchtest>
-->
		</junit>
	</target>
	
	<path id="cobertura.classpath">
		<fileset dir="${cobertura.jar.dir}">
			<include name="cobertura.jar" />
			<include name="lib/**/*.jar" />
		</fileset>
	</path>

	<!-- Load cobertura custom ant tasks -->
	<taskdef classpathref="cobertura.classpath" resource="tasks.properties" />

	<!-- NOTE:  this should be used only after a fresh CORE compile -->
	<target name="instrument_core">
		<delete dir="${core.instr.dir}" />
		<delete file="${cobertura.core.data.file}" />
		<mkdir dir="${core.instr.dir}" />
		<cobertura-instrument todir="${core.instr.dir}" datafile="${cobertura.core.data.file}">
			<fileset dir="${core.build.dir}">
				<include name="**/*.class" />
				<exclude name="**/test/**" />
				<exclude name="**/testUtils/*.class" />
				<exclude name="**/*Test*" />
			</fileset>
		</cobertura-instrument>
	</target>
	
	<target name="test_core_coverage" depends="test_clean_core,test_compile_core,instrument_core,core_setup_test_jetty"
		description="run tests for CORE and capture code coverage" >
		<delete dir="${core.coverage.dir}" />
		<mkdir dir="${core.coverage.dir}"/>

		<path id="instrumented.classpath">
			<pathelement location="${core.instr.dir}" />
			<path refid="test.core.run.classpath" />
			<path refid="cobertura.classpath" />
		</path>

		<echo message="test class = ${core.coverage.test.class}" />

		<junit showoutput="yes" printsummary="yes" fork="yes" haltonfailure="on">
			<formatter type="plain" usefile="false" />
			<classpath refid="instrumented.classpath" />
			<!-- name of the coverage data file to use.  It must be the same
                as the coverage data file generated during instrumentation. -->
			<sysproperty key="net.sourceforge.cobertura.datafile" file="${cobertura.core.data.file}" />

			<sysproperty key="test.config.file" value="${core.test.config.file}" />
    	<sysproperty key="test.data.path" value="${core.test.data.path}" />
    	<sysproperty key="solrmarc.use_binary_request_handler" value="${core.test.use_binary_request_handler}" />
    	<sysproperty key="solrmarc.use_streaming_proxy" value="${core.test.use_streaming_proxy}" />
			<sysproperty key="test.solr.log.level" value="${test.solr.log.level}" />
			<sysproperty key="test.solrmarc.log.level" value="${test.solrmarc.log.level}" />
			<sysproperty key="test.jetty.port" value="${test.jetty.port}" />
			<sysproperty key="test.jetty.dir" value="${test.jetty.dir}" />
    	<sysproperty key="test.solr.url" value="${test.solr.url}" />
			<sysproperty key="test.solr.path" value="${test.solr.run.dir}" />
			<sysproperty key="solr.data.dir" value="${test.solr.data.dir}" />
			<sysproperty key="solr.path" value="${test.solr.run.dir}" />
    	
			<test name="${core.coverage.test.class}" />
		</junit>

		<!-- hudson cobertura plugin uses xml report and html reports are handy -->
		<cobertura-report format="xml" destdir="${core.coverage.dir}" srcdir="${core.src.dir}" datafile="${cobertura.core.data.file}"/>
		<cobertura-report format="html" destdir="${core.coverage.dir}" srcdir="$core.src.dir}" datafile="${cobertura.core.data.file}"/>
	</target>

	
<!-- ******* SITE TEST targets ********** -->
	
	<target name="test_clean_site" description="remove the directories generated for SITE testing">
		<delete dir="$site.test.build.dir}" />
		<delete dir="${site.test.solr.data.dir}" />
		<delete dir="${site.test.solr.run.dir}" />
		<delete file="${test.jetty.dir}/webapps/solr.war"/>
		<delete dir="${site.instr.dir}" />
		<delete file="${cobertura.site.data.file}" />
		<delete dir="${site.coverage.dir}" />
	</target>
	
	<target name="test_init_site" depends="test_init_core" description="create (empty) generated directories for site AND core TEST code">
		<mkdir dir="${site.test.build.dir}" />
	</target>

	<path id="test.site.build.classpath" description="classes and jars needed to build SITE TEST code">
		<fileset dir="${site.test.lib.dir}">
			<include name="**/*.jar" />
		</fileset>
		<pathelement location="${site.build.dir}"/>
		<path refid="site.classpath" />
		<path refid="test.core.run.classpath" />
	</path>

	<target name="test_compile_site" depends="test_compile_core,compile_site,test_init_site" description="Compile SITE AND CORE TEST source code into the test build directory">
<!-- FIXME: it makes NO SENSE that this mkdir is needed -->
		<mkdir dir="${site.test.solr.run.dir}/lib" />
		<javac destdir="${site.test.build.dir}" srcdir="${site.test.src.dir}" 
                target="${java.compat.version}" 
                source="${java.compat.version}" 
                debug="true" debuglevel="lines,vars,source" 
                encoding="utf-8" includeAntRuntime="false">
			<include name="**/*.java" />
			<classpath refid="test.site.build.classpath" />
		</javac>
	</target>
	
	<path id="test.site.run.classpath" description="classes and jars needed to run SITE TEST code">
		<pathelement location="${site.test.build.dir}"/>
		<path refid="test.site.build.classpath" />
		<path refid="test.core.run.classpath" />
	</path>
	
	<target name="site_setup_test_jetty">
		<echo message="solr path for SITE testing: ${test.solr.run.dir}" />
		<!-- set up jetty with solr files, including war, configuration, jars ... -->
		<mkdir dir="${site.test.jetty.dir}/logs" />
		<mkdir dir="${site.test.solr.run.dir}" />
		<copy todir="${site.test.solr.run.dir}">
			<fileset dir="${core.test.solr.orig.dir}" includes="**/conf/**,**/lib/**"/>
		</copy>
		<copy todir="${site.test.solr.run.dir}" overwrite="true">
			<fileset dir="${site.test.solr.orig.dir}" includes="**/conf/**,**/lib/**"/>
		</copy>
		<copy file="${site.test.solr.orig.dir}/conf/solrconfig-test.xml" tofile="${site.test.solr.run.dir}/conf/solrconfig.xml" overwrite="true"/>
		<!-- copy over the war file -->
		<copy file="${site.solr.war.path}" tofile="${test.jetty.dir}/webapps/solr.war" failonerror="false" />
	</target>
	
	<target name="test_site" depends="test_clean,test_compile_site,site_setup_test_jetty" description="run tests for SITE code">
    <junit showoutput="yes" printsummary="yes" fork="yes" forkmode="perBatch" haltonfailure="on">
			<classpath refid="test.site.run.classpath" />
			<formatter type="plain" usefile="false" />

			<sysproperty key="test.config.file" value="${site.test.config.file}" />
    	<sysproperty key="test.data.path" value="${site.test.data.path}" />
    	<sysproperty key="solrmarc.use_binary_request_handler" value="${site.test.use_binary_request_handler}" />
    	<sysproperty key="solrmarc.use_streaming_proxy" value="${site.test.use_streaming_proxy}" />
			<sysproperty key="test.solr.log.level" value="${test.solr.log.level}" />
			<sysproperty key="test.solrmarc.log.level" value="${test.solrmarc.log.level}" />
			<sysproperty key="test.jetty.port" value="${site.test.jetty.port}" />
			<sysproperty key="test.jetty.dir" value="${site.test.jetty.dir}" />
    	<sysproperty key="test.solr.url" value="${site.test.solr.url}" />
			<sysproperty key="test.solr.path" value="${site.test.solr.run.dir}" />
			<sysproperty key="solr.data.dir" value="${site.test.solr.data.dir}" />
			<sysproperty key="solr.path" value="${site.test.solr.run.dir}" />
    	
			<test name="${site.test.class}" />
		</junit>
	</target>

		
	<!-- NOTE:  this should be used only after a fresh SITE compile -->
	<target name="instrument_site">
		<delete dir="${site.instr.dir}" />
		<delete file="${cobertura.site.data.file}" />
		<mkdir dir="${site.instr.dir}" />
		<cobertura-instrument todir="${site.instr.dir}" datafile="${cobertura.site.data.file}">
			<fileset dir="${site.build.dir}">
				<include name="**/*.class" />
				<exclude name="**/*Test*" />
			</fileset>
		</cobertura-instrument>
	</target>
	
	<target name="test_site_coverage" depends="test_clean,test_compile_site,instrument_site,site_setup_test_jetty"
		description="run tests for SITE and capture code coverage" >
		<delete dir="${site.coverage.dir}" />
		<mkdir dir="${site.coverage.dir}"/>
		
		<path id="instrumented.classpath">
			<pathelement location="${site.instr.dir}" />
			<path refid="test.site.run.classpath" />
			<path refid="cobertura.classpath" />
		</path>
		<echo message="test class = ${site.coverage.test.class} " />

		<junit showoutput="yes" printsummary="yes" fork="yes"  haltonfailure="on">
			<formatter type="plain" usefile="false" />
			<classpath refid="instrumented.classpath" />
			<!-- name of the coverage data file to use.  It must be the same
                as the coverage data file generated during instrumentation. -->
			<sysproperty key="net.sourceforge.cobertura.datafile" file="${cobertura.site.data.file}" />

			<sysproperty key="test.config.file" value="${site.test.config.file}" />
    	<sysproperty key="test.data.path" value="${site.test.data.path}" />
    	<sysproperty key="solrmarc.use_binary_request_handler" value="${site.test.use_binary_request_handler}" />
    	<sysproperty key="solrmarc.use_streaming_proxy" value="${site.test.use_streaming_proxy}" />
			<sysproperty key="test.solr.log.level" value="${test.solr.log.level}" />
			<sysproperty key="test.solrmarc.log.level" value="${test.solrmarc.log.level}" />
			<sysproperty key="test.jetty.port" value="${site.test.jetty.port}" />
			<sysproperty key="test.jetty.dir" value="${site.test.jetty.dir}" />
    	<sysproperty key="test.solr.url" value="${site.test.solr.url}" />
			<sysproperty key="test.solr.path" value="${site.test.solr.run.dir}" />
			<sysproperty key="solr.data.dir" value="${site.test.solr.data.dir}" />
			<sysproperty key="solr.path" value="${site.test.solr.run.dir}" />
    	
			<test name="${site.coverage.test.class}" />
		</junit>

		<!-- hudson cobertura plugin uses xml report and html reports are handy -->
		<cobertura-report format="xml" destdir="${site.coverage.dir}" srcdir="${site.src.dir}" datafile="${cobertura.site.data.file}"/>
		<cobertura-report format="html" destdir="${site.coverage.dir}" srcdir="${site.src.dir}" datafile="${cobertura.site.data.file}"/>
	</target>
	
	<target name="test_clean" depends="test_clean_site,test_clean_core" description="remove the directories generated for CORE and SITE testing" />
	
	<target name="clean_all" depends="test_clean, clean" description="remove all generated directories for CORE and SITE, including test and dist">
		<delete dir="${dist.dir}" quiet="true" />
	</target>
	
</project>
